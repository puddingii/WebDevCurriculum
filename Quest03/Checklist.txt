1. 자바스크립트는 버전별로 어떻게 변화하고 발전해 왔을까요?
 자바스크립트는 현재 ES11까지 나왔고 많이 쓰는 버전으로 ES6가 있다. ES6에서 Classes가 나옴으로써 prototype을 통한 class구조를 만들지
 않아도 되고(사실 Class나 prototype이나 똑같이 굴러간다.) let, const, promise등이 나왔다. 최신문법으로 갈수록 브라우저가 호환되지 않을
 수도 있지만 최신문법의 js를 구버전 js로 변환시켜 잘 동작하게끔 하는 babel등장하기도 했다.
 1-1. 자바스크립트의 버전들을 가리키는 ES5, ES6, ES2016, ES2017 등은 무엇을 이야기할까요?
  앞의 영어는 ECMAScript를 뜻하며 뒤에 붙은 숫자는 나온 년도를 뜻한다. ES2016은 ECMAScript의 2016버전이라 생각하면 되고 ES5라고도 불린다.
  ECMAScript는 표준화된 스크립트 프로그래밍 언어를 뜻하고 자바스크립트를 표준화하기 위해 만들어졌다.
 1-2. 자바스크립트의 표준은 어떻게 제정될까요?
  Ecma International이 ECMA-262 기술 규격에 따라 표준을 정의한다.

2. 자바스크립트의 문법은 다른 언어들과 비교해 어떤 특징이 있을까요?
 객체 기반의 스크립트 언어고, 객체 지향형 프로그래밍과 함수형 프로그래밍 모두 표현할 수 있다.
 자바스크립트는 컴파일 작업을 거치치 않고 소스코드를 바로 실행할 수 있고 타입을 명시할 필요가 없는 언어이다.(인터프리터 언어)
 자바같은 경우 class 기반의 객체 지향의 언어고 자바스크립트는 프로토타입 기반의 객체 지향 언어이다.
 2-1. 자바스크립트에서 반복문을 돌리는 방법들은?
  for, forEach, for of, for in, while, do while문이 있다.

3. 자바스크립트를 통해 DOM객체에 CSS Class를 주거나 없애려면 어떻게 해야하나요?
 getElementById나 querySelector로 해당 객체를 가져와 classList를 직접 수정하거나 classList의 add, remove 메서드를 사용하면 된다.
 3-1. IE9나 그 이전의 옛날 브라우저들에서는 어떻게 해야 하나요?
  classList속성을 구현해놓은 호환용 스크립트를 페이지에 포함시키고 작동시킨다.

4. 자바스크립트의 변수가 유효한 범위는 어떻게 결정되나요?
 var은 함수 레벨 스코프이고 let과 const는 블록 레벨 스코프이다.
 4-1. var, let으로 변수를 정의하는 방법들은 어떻게 다르게 동작하나요?
  var은 함수 레벨 스코프라 전역 변수를 남발할 수 있는 문제가 발생했지만 ES6에서 블록 레벨 스코프인 let과 const가 나와서 이 문제를
  해결했다. 그리고 let과 const는 호이스팅이 안되는 반면 var은 호이스팅이 되는 특징을 가진다. 또한 var변수는 재선언이 가능하고 let과
  const는 재선언이 불가능하다.

5. 자바스크립트의 익명함수는 무엇인가요?
 이름이 없는 함수로 즉시 실행이 되는 함수이다.
 5-1. arrow function은 무엇일까요?
  ES6에 나온 함수로 function의 대안이다. 생성자로 사용할 수 없고 this나 super에 대한 바인딩이 없다는것이 특징이다. 또한 
  methods로 사용될 수 없다.

Advanced
1. quest3-1의 코드를 더 구조화하고, 중복을 제거하고, 각각의 코드 블록이 한 가지 일을 전문적으로 잘하게 하려면 어떻게 해야 할까요?
  기능에 따라 함수를 만들어서 세분화한다.
  
2. quest3-2의 스켈레톤 코드에서 let대신 var로 바뀐다면 어떤 식으로 구현할 수 있을까요?
 지금 짜둔 코드에서 let을 var로 바꿔도 큰 문제가 없다.