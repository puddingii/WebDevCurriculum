1.객체지향 프로그래밍은 무엇일까요?
 프로그래밍에서 필요한 데이터를 추상화시켜 상태와 행위를 가진 객체를 가지고 그 객체들 간의 유기적 상호작용을 통해 로직을 구성하는 프로그래밍 방법(ex: class)
 1-1. #로 시작하는 프라이빗 필드는 왜 필요한 것일까요? 정보를 은폐(encapsulation)하면 어떤 장점이 있을까요?
  다른 객체에게 자신의 정보를 숨기고 자신의 연산만을 통해 접근을 허용하는 것인데, 이를 통해 외부 객체가 특정 객체를 직접 접근하여 사용하거나 변경하지 못하므로
  유지보수와 소프트웨어 확장시 오류를 최소화 할 수 있다.
 1-2. 다형성이란 무엇인가요? 다형성은 어떻게 코드 구조의 정리를 도와주나요?
  하나의 객체가 여러 가지 타입을 가질 수 있는 것을 의미하는 것으로, 상속, 추상화와 연관되어 객체 지향 프로그래밍을 할 수 있도록 도와주는 중요한 특징이다. 대표적으로
  오버로딩, 오버라이딩이 있으며 오버로딩은 같은 이름의 메서드들을 여러개 가지면서 매개변수의 유형과 개수를 다르게 하는 것이다. 오버라이딩은 상위 클래스가
  가지고 있는 메서드를 하위 클래스에서 재정의해서 사용하는 것이다.
 1-3. 상속이란 무엇인가요? 상속을 할 때의 장점과 단점은 무엇인가요?
  상속의 장점은 코드를 재사용함으로써 중복을 줄일 수 있고, 변화에 대한 유연성 및 확장성이 증가하고 개발시간이 단축된다.
  단점은 만일의 상황에 대비해 외부에서 특정 속성이나 메서드를 사용할 수 없도록 숨기는 특징인 캡슐화가 깨진다.
 1-4. OOP의 합성(Composition)이란 무엇인가요? 합성이 상속에 비해 가지는 장점은 무엇일까요?
  기존 클래스가 새로운 클래스의 구성요소로 쓰이는 것으로 새로운 클래스를 만들고 private필드로 기존 클래스의 인스턴스를 참조만 하는것이다.
  장점으로는 메서드를 호출하는 방식이기 때문에 캡슐화를 깨뜨리지 않고 기존 클래스의 변화에 영향이 적어지며 안전해진다.

2. 자바스크립트의 클래스는 어떻게 정의할까요?
 class 선언, class 표현식, function의 prototype을 이용한 클래스 정의
 2-1. 프로토타입 기반의 객체지향 프로그래밍은 무엇일까요?
  프로토타입을 기반으로 만든 객체지향 프로그래밍이다. class기능을 prototype으로 만들어서 붙여진 것으로 ECMA6에서 Class문법이 추가되었지만 이것은 자바스크립트가
  class기반으로 바뀌었다는 뜻은 아니다.
 2-2. 자바스크립트의 클래스는 이전의 프로토타입 기반의 객체지향 구현과 어떤 관계를 가지고 있나요?
  class는 클래스로부터 인스턴스 상속을 받아 클래스를 인스턴스를 사용하는 것처럼 사용할 수 없다. prototype은 다른 객체로부터 직접 인스턴스가 상속되므로 다른 객체의 기반이
  된다. class상속을 이용한 방법은 변경하기 어렵고 기반이 되는 클래스를 수정했을 때 하위 클래스들이 영향을 쉽게 받을 수 있는 계층구조를 만들고 Prototype상속은 반드시 유사한
  계층구조를 생성하지 않으므로 프로토타입 체인을 최대한 간결하게 만드는 것이 중요하다.

Advanced
1. 객체지향의 역사는 어떻게 될까요?
 1960년 시뮬라67이 채택한 개념인 CLASS의 도입으로 시작되었고 1990년 초반대 많은 발전이 되었다. C++과 JAVA가 대표적인 객체 지향언어였다.
2. Smalltalk, Java, Go, Kotlin 등의 언어들로 넘어오면서 객체지향 패러다임 측면에서 어떤 발전이 있었을까요?
 클래스 개념뿐만이 아니라 중복, 상속, 가상 함수, 추상 클래스, 예외처리와 같은 다양한 기능이 추가되면서 발전되었다.