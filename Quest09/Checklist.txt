1. 비동기 프로그래밍이란 무엇인가요?
 한번에 한가지 동작을 하는 것이 아닌 동시에 작업을 하는 것이다. 예를 들면 순차적으로 코드를 실행시키고 있을 때 시간이 오래걸리는 작업을 만난다면
 오래 걸리는 작업을 다른 스레드에 수행시키고 다른 작업을 하는 것과 똑같다.
 1-1. 콜백을 통해 비동기적 작업을 할 때의 불편한 점은 무엇인가요? 콜백지옥이란 무엇인가요?
  가독성이 떨어지고 콜백지옥을 만들 수 있다.
  콜백 지옥이란 콜백 함수를 익명 함수로 전달하는 과정에서 또 다시 콜백 안에 함수 호출이 반복되어 들여쓰기가 깊어지는 현상을 말한다.
 1-2. 자바스크립트의 Promise는 어떤 객체이고 어떤 일을 하나요?
  Promise는 비동기 작업이 끝날때 성공과 실패 값을 나타낸다. 비동기 연산이 종료된 이후의 결과값을 처리하기 위한 함수를 연결할 수 있도록 도와준다.
 1-3. 자바스크립트의 async와 await 키워드는 어떤 역할을 하며 그 정체는 무엇일까요?
  Promise또한 쓰다보면 콜백지옥에 빠질 수 있다. 가독성을 높이고 Promise를 좀 더 쉽게 사용하기 위해 async/await가 나왔다. async/await는
  await를 사용하면 Promise가 종료될 때까지 함수실행이 일시 정지가 된다. 그리고 Promise가 종료되면 다시 진행이 되고 Promise에서 resolve 된 값을 반환하게 된다.

2. 브라우저 내 스크립트에서 외부 리소스를 가져오려면 어떻게 해야 할까요?
 가져오는 방법으로 HTML에서는 script태그가 있고 만나면 진행하던 파싱을 중단하고 스크립트 리소스를 다운로드하고 파싱해 실행한다. link태그도 있음. js에서는 fetch가 있다.
 2-1. 브라우저의 XMLHttpRequest 객체는 무엇이고 어떻게 동작하나요?
  전체 페이지를 새로 고침할 필요 없이 URL에서 데이터를 검색할 수 있게 한다. 웹페이지는 사용자가 수행하는 작업을 방해하지 않고 페이지의 일부만 업데이트 할 수 있다.
 2-2. fetch API는 무엇이고 어떻게 동작하나요?
  리소스를 가져오기 위한 인터페이스를 제공한다. 서버와 비동기 요청방식 중 하나로 Promise기반이기 때문에 then을 붙여 fetch실행이 끝나면 나온 결과값으로 가공이 가능하다.

3. REST는 무엇인가요?
 REST는 REpresentational State Transfer의 약자로 효율적이고, 안정적이며 확장가능한 분산시스템을 가져올 수 있는 소프트웨어 아키텍처 디자인 제약의 모음을 나타낸다.
 REST의 특징으로 유니폼 인터페이스(HTTP표준에 따른다면 언어나 기술에 종속되지 않고 모든 플랫폼에 사용가능), 무상태성(저장,관리하지 않음), 캐시가능(HTTP가 가진 캐싱기능 적용),
 자체표현구조(REST API 메시지만 보고 쉽게 이해가능한 구조), Client-server구조(클라이언트가 세션이나 로그인 직접 관리하는 구조), 계층형 구조(보안, 암호화 등의 계층을 추가하여
 구조의 유연성을 볼 수 있음)
 3-1. REST API는 어떤 목적을 달성하기 위해 나왔고 어떤 장점을 가지고 있나요?
  컴퓨터 프로그램간에 정보를 교환 가능하도록 만들기 위해 나왔다. HTTP프로토콜의 인프라를 그대로 사용해서 REST API사용을 위한 별도의 인프라 구축이 필요없음. 메시지가 의도하는 것이
  명확하기 때문에 쉽게 파악가능하다.
 3-2.RESTful한 API 설계의 단점은 무엇인가요?
   메소드가 4가지 밖에 없다. http 메소드 형태가 제한적이다.

4.CORS란 무엇인가요? 이러한 기능이 왜 필요할까요? CORS는 어떻게 구현될까요?
 CORS(Cross-Origin Resource Sharing)는 추가 HTTP헤더를 사용하여, 한 출처에서 실행중인 웹 어플리케이션이 다른 출처의 자원에 접근할 수 있는 권한을 부여하도록 브라우저에
 알려주는 체제다. 아무런 제약이 없다면 CSRF나 XSS와 같은 방법을 사용하여 어플리케이션에서 코드가 실행된 것처럼 꾸며서 사용자의 정보를 탈취하는 일이 발생할 수도 있다.
 동작과정
 웹 클라이언트 어플리케이션이 다른 출처의 리소스를 요청할 때 HTTP프로토콜을 사용하여 요청을 보내게 되는데, 이때 브라우저는 요청 헤더에 Origin이라는 필드에 요청을 보내는 출처를
 같이 담아 보낸다. 그리고 이 요청에 대한 응답을 할 때 응답헤더의 Access-Control-Allow-Origin이라는 값에 이 리소스를 접근하는 것이 허용된 출처를 적어주고 이 값과 origin을
 비교한 뒤 응답이 유효한지 확인하는 과정으로 구현된다.