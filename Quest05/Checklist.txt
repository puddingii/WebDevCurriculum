1. 관심사의 분리 원칙이란 무엇인가요? 웹에서는 이러한 원칙이 어떻게 적용되나요?
 프로그램이 별개의 섹션을 가져야하고 각 섹션은 자기만을 책임져야 한다는 아이디어에 중심을 둔 소프트웨어 개발의 기본 원칙이다.
 HTML과 CSS분리와 CSS와 자바스크립트 분리, 즉 HTML, CSS, Javascript의 분리가 관심사의 분리 원칙이 적용된 거라 생각할 수 있다.

2. 객체지향의 SOLID 원칙이란 무엇인가요? 이 원칙을 구체적인 예를 들어 설명할 수 있나요?
 SOLID란 단일 책임 원칙, 개방 폐쇄 원칙, 리스코프 치환 원칙, 인터페이스 분리 원칙, 의존성 역전 원칙을 줄인 말이다.
  -단일 책임 원칙은 클래스는 단일 책임을 맡는다는 뜻으로 예를 들어 음식점의 직원이 여러명 있다면 한 직원은 음식만 담당하고 다른 직원은 서빙 담당만 한다는 뜻이다.
  -개방 폐쇄 원칙은 확장은 개방하고 수정은 폐쇄적으로 한다는 뜻이다. 예를 들어 한 클래스에 많은 기능이 집중되면 상속받는 클래스가 가져갈 부분이 엄청 많아지고 상속받은 클래스가 
  고쳐서 써야할 부분이 있다면 수정을 해야한다. 그래서 한 클래스에 모든 기능들이 집중되지 않고 분할되어 있으면 각 클래스마다 기능들을 추가하는게 쉬워지고 수정또한 쉬워진다.
  -리스코프 치환 원칙은 a가 A의 하위형이라면 필요한 속성의 변경없이 A의 객체를 a의 객체로 교환할 수 있어야 한다는 뜻이다. 예를 들어 선과 점이 있다면 선이 점이 될수는 없지만
  점이 선이 될 수 있는거랑 비슷하다고 생각하면 된다.
  -인터페이스 분리 법칙은 큰 덩어리의 인터페이스들을 구체적이고 작은 단위들로 분리시킴으로써 클라이언트들이 꼭 필요한 메서드들만 사용할 수 있게 하는 것이다. 예를 들자면 종이를 자르고 접는
  기계가 있다고 했을 때 만약 종이를 자르기만 하고 풀칠을 해야하는 작업이 몇 개 생긴다면 기계에서 종이를 자르는 작업만 작동시키고 풀칠하는 기능을 가져오는 것이 인터페이스 분리이다.
  -의존성 역전 원칙은 말 그대로 의존성이 역전되면 안된다는 뜻이다. 만약 교사와 학생이 있다고 하면 교사는 학생들의 정보를 다 볼수 있지만 학생은 자기 자신의 것만 볼 수 있다. 하지만 만약
  학생이 교사가 볼 수 있는 학생들의 정보들을 볼 수 있게 된다면 안된다. 이때 권한을 부여해주고 권한에 따라 볼 수 있는 범위가 달라지는 프로그램을 도입한다면 의존성이 역전되는 일은 발생하지
  않을 것인데 이것을 보고 의존성 역전 원칙이라 한다.

3. 로컬 스토리지란 무엇인가요? 로컬 스토리지의 내용을 개발자 도구를 이용해 확인하려면 어떻게 해야 할까요?
 sessionStorage랑 비슷한 것으로 현재 출처의 로컬 저장 공간이다. 개발자 도구를 이용한 내용 확인은 Application -> Storage -> Local Storage에서 해당 사이트주소를 확인하면 
 key,value형식으로 저장되어 있는 것을 볼 수 있다.

Advanced
웹 프론트엔드 개발에서 이러한 방식의 패턴을 더 일반화해서 정리할 수 있을까요? 이 퀘스트에서 각각의 클래스들이 공통적으로 수행하게 되는 일들에는 무엇이 있을까요?
 공통적으로 constructor을 이용하여 객체를 생성할 때 초기화를 한다. 각 변수에 대한 접근을 위해 getter와 setter 선언을 한다. 사람마다 코딩스타일이 다르지만 
 어느정도의 공통점을 찾아 그 공통점을 일반화한다면 협업할때 코드를 이해하기 쉬울 것 같다.