1. 입력 데이터의 Validation을 웹 프론트엔드에서 했더라도 서버에서 또 해야 할까요? 그 이유는 무엇일까요?
 브라우저에서 오는 데이터는 양식을 제공하는지 여부와 연결이 HTTPS로 보호되어있는지 여부와 관계없이 신뢰할 수 없다.
 유저는 Markup을 보내기 전에 curl과 같은 명령줄 응용 프로그램을 사용해서 데이터를 수정해서 제출할 수 있기 때문에 유효성 검사를 해야한다.
 신뢰할 수 없는 입력이 원하지 않는 영향을 미칠 위험을 최소화하기 위한 것이 유효성 검사이다.
 1-1. 서버로부터 받은 HTML 내용을 그대로 검증 없이 프론트엔드에 innerHTML 등을 통해 적용하면 어떤 문제점이 있을까요?
  만약 건영";window.location="naver.com";을 주게 된다면 innerHTML안에는 완성된 문장이 "건영";window.location"naver.com";"이 되어버린다.
  제대로 실행되지 않을 뿐더러 window.location으로 인해 다른 사이트를 가게 될 수도 있는 나쁜상황이 될수도 있다.
 1-2. XSS(Cross-site scripting)이란 어떤 공격기법일까요?
  권한이 없는 사용자가 웹 사이트에 스크립트를 삽입하는 공격기법이다. 해커가 삽입한 스크립트는 사용자가 웹사이트를 방문할 때 발생하며 이것으로 사용자의 쿠키를
  탈취하는 세션 하이재킹이나 C&C서버로 리다이렉션 하기 위한 스크립트를 주입하여 중간 경유지로 사용하기도 한다.
 1-3. CSRF(Cross-site request forgery)이란 어떤 공격기법일까요?
  사용자가 자신의 의지와는 무관하게 공격자가 의도한 행위(수정, 삭제, 등록 등)를 특정 웹사이트에 요청하게 하는 것이다.
 1-4. SQL Injection이란 어떤 공격기법일까요?
 응용 프로그램의 보안 상의 허점을 의도적으로 이용해, 악의적인 SQL문을 실행되게 함으로써 DB를 비정상적으로 조작하는 코드 인젝션 공격 방법이다.

2. 대부분의 최신 브라우저에서는 HTTP 대신 HTTPS가 권장됩니다. 이유가 무엇일까요?
 HTTPS는 Hypertext Transfer Protocol Secure의 약자로 HTTP프로토콜의 문제점인 서버에서부터 브라우저로 전송되는 정보가 암호화되지 않는 것을 암호화해서
 보내줄수 있다. HTTPS는 SSL(보안 소켓 계층)을 사용해서 서버와 브라우저 사이의 안전한 연결을 도와주고 해커에게 데이터를 도난당하는 것을 방지해준다.
 2-1. HTTPS와 TLS는 어떤 식으로 동작하나요? HTTPS는 어떤 역사를 가지고 있나요?
  TLS는 응용계층 및 전송계층 사이에서 안전한 보안 채널을 형성해준다. 여기에서 HTTPS는 보안용 프로토콜에 HTTP를 얹어서 보안된 HTTP통신을 하는 프로토콜이다.
  HTTPS는 넷스케이프 커뮤니케이션스가 넷스케이프 내비게이터 웹 브라우저를 위해 HTTPS를 개발했다. HTTPS는 SSL프로토콜과 함께 사용이 되었고 SSL이 TLS으로 발전했을 때
  공식적으로 RFC 2818에 규정되었다.
 2-2. HTTPS의 서비스 과정에서 인증서는 어떤 역할을 할까요? 인증서는 어떤 체계로 되어 있을까요?
  인증서는 통신에 사용할 공개키가 클라이언트에게 제공하는 역할을 하고 클라이언트가 접속한 서버가 신뢰할 수 있는 서버로 보장하는 역할을 한다.
  서버는 비대칭 공개키 사본을 브라우저로 전송하고 브라우저는 대칭 세션키를 만들어 서버의 비대칭 공개키로 암호화하고 서버로 전송한다. 그리고 서버는 대칭 세션키를 얻기 위해
  비대칭 비공개 키로 암호화된 세션 키를 복호화하고 서버와 브라우저에서 대칭 세션키를 통해 전송된 데이터를 암복호화한다.