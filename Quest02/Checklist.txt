1. CSS를 HTML에 적용하는 세 가지 방법? 각 장단점은?
 1-1. Inline style sheet : HTML Tag안에 style속성을 직접 지정해준다.
  장단점 : 바로바로 꾸밀 수 있지만 재사용이 불가능하고 꾸미는데 한계가 있다.
 1-2. Linking style sheet : 별도의 css파일을 생성해서 각 속성에 대한 설정 후 html에서 부르는 방법.
  장단점 : 여러 html파일에 적용할 수 있다. link태그로 연결하여 사용한다.
 1-3. Internal style sheet : HTML문서 안의 <style>태그 안에 css코드를 넣는 방법. 
  장단점 : 해당 html파일의 요소들을 한번에 꾸밀 수 있지만 다른 html파일에는 적용이 불가능하다.

2. CSS 규칙의 우선순위는 어떻게 결정될까요?
 1. 속성 값 뒤에 !important를 붙인 속성
 2. html에서 style을 직접 지정한 속성
 3. 아이디(#id)로 지정한 속성
 4. 클래스와 추상클래스로 지정한 속성
 5. 태그이름으로 지정한 속성
 6. 상위 객체에 상속된 속성
 etc. 같은 우선순위인 경우 부모-자식 관계가 많은 경우가 우선되고 모든 설정이 같은 경우 뒤에 선언한 것이 우선됨.

3. CSS의 박스모델은 무엇일까요? 박스가 화면에서 차지하는 크기는 어떻게 결정?
 문서의 레이아웃을 계산할 때, 브라우저의 렌더링 엔진은 css 박스 모델을 따라 각각의 요소를 사각형 박스로 표현한다. 즉 html 태그 요소들이 박스
 모양으로 구성되어 있는데 이걸 보고 박스 모델이라고 부른다.
 박스모델은 content area, padding area, border area, margin area로 나뉜다. 해당 영역들의 길이를 설정하고 설정된 길이의 합이
 해당 태그의 크기(박스)라 볼 수 있다. 
 content area: 실질적 내용 부분, padding area: 내용과 테두리 사이의 간격, border: 내용과 패딩 주변을 감싸는 테두리, margin:테두리와 이웃
 하는 요소 사이의 간격

4. float속성이 좋지않은 이유는?
 부모 요소의 크기문제. -> 부모 요소의 크기가 자동으로 늘어나지 않는다.
 요소의 높이가 제각각일 때 정렬의 문제발생. 줄바꿈이 있는 레이아웃에서의 정렬이 깨진다.
 속성의 상속문제가 발생한다. float은 요소의 흐름을 관리하는 속성이기 때문에 속성이 다음 요소로 상속됨.
 주변의 요소에 영향을 주게 된다.

5. Flexbox(Flexible box)와 CSS Grid의 차이와 장단점은 무엇인지?
 flex는 1차원으로 수펴으 수직 영역 중 하나의 방향만 레이아웃을 나눌 수 있다.
  장점 : 모든 방향으로 정렬이 가능, reverse도 가능, container로 사용할 경우 하위 item들을 정렬하기가 매우 수월
  단점 : 퍼포먼스 이슈
 grid는 2차원으로 수평 수직을 동시에 영역을 나눌 수 있음.
  장점 : prototyping할때 매우 쉽고 효율적으로 작성 가능
  단점 : 모든 브라우저에서 지원하는 것이 아님.

6. CSS와 비슷한 요소들은 어떤 식으로 정리?
 ...?

Advanced
1. 왜 CSS는 어려울까요?
 어떤 CSS규칙이 최종적으로 적용될지 예측하기 어렵다. 규칙을 여러번 선언할 수 있을 뿐더러 어디서든 선언될 수 있기 때문에 전체적으로 파악하기 어렵다.
 런타임환경을 예상하기 어렵다. 웹브라우저의 버전, 운영체제 등이 CSS결과값에 영향을 주기 때문에 예상하기 어렵다.

2. CSS의 어려움을 극복하기 위해 어떤 방법들이 제시되고 나왔을까요?
 CSS Modules 각 파일에 선언된 css선택자에 고유한 해시 문자열을 추가하여 해당 선택자가 각 파일의 네임스페이스만 동작하도록 자동적으로 관리해주는 모듈이 있다.

3. CSS가 브라우저에 의해 해석되고 적용되기까지 내부적으로 어떤 과정을 거칠까요?
 0. HTML 데이터를 가져오고 나서 분석하는 과정..
 1. DOM트리 구성 : HTML Parser로 파싱하고 결과를 로딩한다. 메모리에 만들어진 객체를 Document라 하고 완성된 구조를 DOM이라고 한다.
 2. 렌더 트리 구성 : 실제로 화면을 구성하는 렌더링 엔진을 통해 화면에 나오는 구조를 만들어 낸다. 이렇게 만들어지는 구조를 렌더트리라 한다. 이때 HTML과 CSS를 고려하여 화면에 나와야하는 것만
 선별해서 화면에 뿌려준다. 이때 CSS가 위쪽에 있어야 렌더링 엔진이 화면에서 어떤 방식으로 처리할지 기준을 빨리 정해서 렌더 트리를 구성하기가 쉬워진다. HTML을 파싱하는 도중에 일어난다.
 3. 렌더 트리 배치 : 이전 과정에서 분류해 준 상자들을 화면에 배치하는 작업을 함.
 4. 렌더 트리 페인팅 : 레이아웃을 모두 구성하고 그 결과를 UI 백엔드를 통해 화면에 출력하는 과정.

4. 웹 폰트의 경우에는 브라우저 엔진 별로 어떤 과정을 통해 렌더링 될까요?
 앞의 랜더 트리 구성에서 css파일을 가져올 때 같이 폰트도 적용시킨다.